#!/usr/bin/env python3
import subprocess
import os
import signal
from contextlib import contextmanager
import re
from pathlib import Path
import sys

# Location of locally cloned version of repo
GIT_PROJECT_ROOT = Path('/var/lib/git/')
# Extract the socket name from the stdout of ssh-agent
SSH_AUTH_SOCK_RE = re.compile(r'SSH_AUTH_SOCK=([^;]*);')
# Extract the agent PID from the stdout of ssh-agent
SSH_AGENT_PID_RE = re.compile(r'SSH_AGENT_PID=([^;]*);')
# Extract the project name from an upstream URL - assumes clone via SSH
PROJECT_NAME_RE = re.compile(r'/(.*)\.git')
# Extract the project host from an upstream URL - assumes clone via SSH
PROJECT_HOST_RE = re.compile(r'git@(.*):')

# URL of upstream repo to use
REPO_URL = os.environ.get('REPO_URL')
# SSH key to use to authenticate to the upstream repo
SSH_KEY  = os.environ.get('SSH_KEY')

@contextmanager
def ssh_agent_session(ssh_key_path: str):
    """ Run the context within an eval $(ssh-agent), closing the agent at the end """
    ssh_agent_out, ssh_agent_err = subprocess.Popen('ssh-agent', stdout=subprocess.PIPE).communicate()
    socket_line, pid_line, *_ = [l.decode() for l in ssh_agent_out.splitlines()]

    socket_match = SSH_AUTH_SOCK_RE.search(socket_line)
    pid_match = SSH_AGENT_PID_RE.search(pid_line)
    if not socket_match or not pid_match:
        raise RuntimeError(f"Unexpected ssh-agent output: {ssh_agent_out.decode()}")

    os.environ['SSH_AUTH_SOCK'] = socket_match[1]
    os.environ['SSH_AGENT_PID'] = pid_match[1]

    try:
        subprocess.run(['ssh-add', ssh_key_path])
        yield
    finally:
        os.kill(int(os.environ['SSH_AGENT_PID']), signal.SIGTERM)

def get_repo_name_from_url(repo_url: str):
    """ Extract the name of a repo from its upstream url """
    if not (repo_name_match := PROJECT_NAME_RE.search(repo_url)):
        raise RuntimeError(f"Unable to determine repo name from {repo_url}")
    return repo_name_match[1]


def trust_upstream_host(repo_url: str):
    """ Add a host's fingerprints to known_hosts prior to cloning """
    if not (host_match := PROJECT_HOST_RE.search(repo_url)):
        raise RuntimeError(f"Unable to determine remote upstream host name from {repo_url}")

    with open(Path.home() / '.ssh' / 'known_hosts', 'a') as known_hosts:
        subprocess.run(['ssh-keyscan', host_match[1]], stdout=known_hosts)

def cloned_repo_exists(repo_url: str):
    """ Check whether the given repo is already cloned. If it is, confirm the origin is correct """
    repo_name = get_repo_name_from_url(repo_url)
    repo_dir = GIT_PROJECT_ROOT / repo_name

    if not repo_dir.exists():
        return False

    upstream_info, _ = subprocess.Popen(['git','config','--get','remote.origin.url'],
                                        cwd=repo_dir,stdout=subprocess.PIPE).communicate()
    upstream_url = upstream_info.decode().strip()

    if upstream_url != repo_url:
        raise RuntimeError(f"Local version of repo has unexpected upstream {upstream_url}")
    
    return True
    
def clone_repo(repo_url:str, ssh_key_path:str):
    """ Clone the repo at the given url """

    if cloned_repo_exists(repo_url):
        sync_repo(repo_url, ssh_key_path)
        return

    with ssh_agent_session(ssh_key_path):
        repo_name = get_repo_name_from_url(repo_url)
        subprocess.run(['git', 'clone', repo_url, repo_name], cwd=GIT_PROJECT_ROOT)

def sync_repo(repo_url:str, ssh_key_path:str):
    """ Hard reset the state of the repo to the given upstream """
    with ssh_agent_session(ssh_key_path):
        repo_name = PROJECT_NAME_RE.search(repo_url)[1]
        repo_dir = GIT_PROJECT_ROOT / repo_name
        branch_info, _ = subprocess.Popen(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], stdout=subprocess.PIPE, cwd=repo_dir).communicate()
        branch_name = branch_info.decode().strip()
        subprocess.run(['git', 'fetch', '--all'], cwd=repo_dir)
        subprocess.run(['git', 'reset', '--hard', f'origin/{branch_name}'], cwd=repo_dir)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print(f"usage: {sys.argv[0]} [clone_repo|sync_repo|trust_repo]")
        exit(1)
    if not REPO_URL or not SSH_KEY:
        print("Error: must specify REPO_URL and SSH_KEY environment variables")
        exit(1)

    action = sys.argv[1]
    if action == 'clone_repo':
        clone_repo(REPO_URL, SSH_KEY)
    elif action == 'sync_repo':
        sync_repo(REPO_URL, SSH_KEY)
    elif action == 'trust_repo':
        trust_upstream_host(REPO_URL)
