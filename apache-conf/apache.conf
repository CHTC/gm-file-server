# Config for git-http-backend
SetEnv GIT_PROJECT_ROOT /var/lib/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/

RewriteEngine On

#RewriteCond %{QUERY_STRING} service=git-receive-pack [OR]
#RewriteCond %{REQUEST_URI} /git-receive-pack$
#RewriteRule ^/git/ - [E=AUTHREQUIRED:yes]

<LocationMatch "^/git/">
  AuthName "Git Access"
  AuthType Basic
  AuthUserFile ${DATA_DIR}/.htpasswd
  Require valid-user
</LocationMatch>

# Config for gitweb

Alias /gitweb /var/www/git

<Directory /var/www/git>
  Options +ExecCGI
  AddHandler cgi-script .cgi
  DirectoryIndex gitweb.cgi
</Directory>


# Config for WSGI FastAPI application
<Location /api/public>
  <RequireAny>
    Require all granted
  </RequireAny>
  AuthType none
</Location>

<Location /api/private>
  AuthName "Private API"
  AuthType Basic
  AuthUserFile ${DATA_DIR}/.htpasswd
  Require valid-user
</Location>

<Location /api>
  ProxyPass http://localhost:8089
  ProxyPassReverse http://localhost:8089
</Location>

<Location /api/public>
  <RequireAny>
    Require all granted
  </RequireAny>
  AuthType none
</Location>

<Location /api/private>
  AuthName "Private API"
  AuthType Basic
  AuthUserFile ${DATA_DIR}/.htpasswd
  Require valid-user
</Location>

# WSGI application
# Big TODO: one of the Rust libraries that backs FastAPI doesn't like Apache's
#   default approach to spinning off multiple WSGI processes. Setting process count
#   on startup appears to mitigate this issue, but is probably not a long term 
#   solution: https://github.com/PyO3/pyo3/issues/576
#WSGIDaemonProcess gm-file-server-api home=/srv/app/ processes=5
#WSGIProcessGroup gm-file-server-api
#WSGIScriptAlias /api /srv/app/wsgi.py
# Syslog CA issuer require examination of the authorization header
#WSGIPassAuthorization On
